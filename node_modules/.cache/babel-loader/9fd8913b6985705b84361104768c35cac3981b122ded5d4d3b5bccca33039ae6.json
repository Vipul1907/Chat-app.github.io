{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rowdy Killer\\\\Desktop\\\\Chat\\\\src\\\\components\\\\Input.jsx\";\nimport React, { useContext, useState } from \"react\";\nimport Img from \"../img/img.png\";\nimport Attach from \"../img/attach.png\";\n// import { AuthContext } from \"../context/AuthContext\";\n// import { ChatContext } from \"../context/ChatContext\";\n// import {\n//   arrayUnion,\n//   doc,\n//   serverTimestamp,\n//   Timestamp,\n//   updateDoc,\n// } from \"firebase/firestore\";\n// import { db, storage } from \"../firebase\";\n// import { v4 as uuid } from \"uuid\";\n// import { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = () => {\n  //   const [text, setText] = useState(\"\");\n  //   const [img, setImg] = useState(null);\n\n  //   const { currentUser } = useContext(AuthContext);\n  //   const { data } = useContext(ChatContext);\n\n  //   const handleSend = async () => {\n  //     if (img) {\n  //       const storageRef = ref(storage, uuid());\n\n  //       const uploadTask = uploadBytesResumable(storageRef, img);\n\n  //       uploadTask.on(\n  //         (error) => {\n  //           //TODO:Handle Error\n  //         },\n  //         () => {\n  //           getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //             await updateDoc(doc(db, \"chats\", data.chatId), {\n  //               messages: arrayUnion({\n  //                 id: uuid(),\n  //                 text,\n  //                 senderId: currentUser.uid,\n  //                 date: Timestamp.now(),\n  //                 img: downloadURL,\n  //               }),\n  //             });\n  //           });\n  //         }\n  //       );\n  //     } else {\n  //       await updateDoc(doc(db, \"chats\", data.chatId), {\n  //         messages: arrayUnion({\n  //           id: uuid(),\n  //           text,\n  //           senderId: currentUser.uid,\n  //           date: Timestamp.now(),\n  //         }),\n  //       });\n  //     }\n\n  //     await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n  //       [data.chatId + \".lastMessage\"]: {\n  //         text,\n  //       },\n  //       [data.chatId + \".date\"]: serverTimestamp(),\n  //     });\n\n  //     await updateDoc(doc(db, \"userChats\", data.user.uid), {\n  //       [data.chatId + \".lastMessage\"]: {\n  //         text,\n  //       },\n  //       [data.chatId + \".date\"]: serverTimestamp(),\n  //     });\n\n  //     setText(\"\");\n  //     setImg(null);\n  //   };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type something...\"\n      //  onChange={(e) => setText(e.target.value)}\n      //  value={text}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Attach,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: \"none\"\n        },\n        id: \"file\"\n        //  onChange={(e) => setImg(e.target.files[0])}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Img,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useContext","useState","Img","Attach","jsxDEV","_jsxDEV","Input","className","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","display","id","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/Rowdy Killer/Desktop/Chat/src/components/Input.jsx"],"sourcesContent":["import React, { useContext, useState } from \"react\";\nimport Img from \"../img/img.png\";\nimport Attach from \"../img/attach.png\";\n// import { AuthContext } from \"../context/AuthContext\";\n// import { ChatContext } from \"../context/ChatContext\";\n// import {\n//   arrayUnion,\n//   doc,\n//   serverTimestamp,\n//   Timestamp,\n//   updateDoc,\n// } from \"firebase/firestore\";\n// import { db, storage } from \"../firebase\";\n// import { v4 as uuid } from \"uuid\";\n// import { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\n\nconst Input = () => {\n//   const [text, setText] = useState(\"\");\n//   const [img, setImg] = useState(null);\n\n//   const { currentUser } = useContext(AuthContext);\n//   const { data } = useContext(ChatContext);\n\n//   const handleSend = async () => {\n//     if (img) {\n//       const storageRef = ref(storage, uuid());\n\n//       const uploadTask = uploadBytesResumable(storageRef, img);\n\n//       uploadTask.on(\n//         (error) => {\n//           //TODO:Handle Error\n//         },\n//         () => {\n//           getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n//             await updateDoc(doc(db, \"chats\", data.chatId), {\n//               messages: arrayUnion({\n//                 id: uuid(),\n//                 text,\n//                 senderId: currentUser.uid,\n//                 date: Timestamp.now(),\n//                 img: downloadURL,\n//               }),\n//             });\n//           });\n//         }\n//       );\n//     } else {\n//       await updateDoc(doc(db, \"chats\", data.chatId), {\n//         messages: arrayUnion({\n//           id: uuid(),\n//           text,\n//           senderId: currentUser.uid,\n//           date: Timestamp.now(),\n//         }),\n//       });\n//     }\n\n//     await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n//       [data.chatId + \".lastMessage\"]: {\n//         text,\n//       },\n//       [data.chatId + \".date\"]: serverTimestamp(),\n//     });\n\n//     await updateDoc(doc(db, \"userChats\", data.user.uid), {\n//       [data.chatId + \".lastMessage\"]: {\n//         text,\n//       },\n//       [data.chatId + \".date\"]: serverTimestamp(),\n//     });\n\n//     setText(\"\");\n//     setImg(null);\n//   };\n  return (\n    <div className=\"input\">\n       <input\n         type=\"text\"\n         placeholder=\"Type something...\"\n        //  onChange={(e) => setText(e.target.value)}\n        //  value={text}\n       />\n       <div className=\"send\">\n         <img src={Attach} alt=\"\" />\n         <input\n           type=\"file\"\n           style={{ display: \"none\" }}\n           id=\"file\"\n          //  onChange={(e) => setImg(e.target.files[0])}\n         />\n         <label htmlFor=\"file\">\n           <img src={Img} alt=\"\" />\n         </label>\n         <button>Send</button>\n         {/* <button onClick={handleSend}>Send</button> */}\n       </div>\n     </div>\n  );\n};\n\nexport default Input;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,GAAG,MAAM,gBAAgB;AAChC,OAAOC,MAAM,MAAM,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,KAAK,GAAGA,CAAA,KAAM;EACpB;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACE,oBACED,OAAA;IAAKE,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACnBH,OAAA;MACEI,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC;MACb;MACA;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACFT,OAAA;MAAKE,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBH,OAAA;QAAKU,GAAG,EAAEZ,MAAO;QAACa,GAAG,EAAC;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3BT,OAAA;QACEI,IAAI,EAAC,MAAM;QACXQ,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAO,CAAE;QAC3BC,EAAE,EAAC;QACJ;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACFT,OAAA;QAAOe,OAAO,EAAC,MAAM;QAAAZ,QAAA,eACnBH,OAAA;UAAKU,GAAG,EAAEb,GAAI;UAACc,GAAG,EAAC;QAAE;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACRT,OAAA;QAAAG,QAAA,EAAQ;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEX,CAAC;AAACO,EAAA,GAnFIf,KAAK;AAqFX,eAAeA,KAAK;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}